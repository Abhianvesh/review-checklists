name: Translation

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
on:
  # pull_request:
  #   branches: [ main ]
  #   paths:
  #   - '**.en.json' # only take action when *.en.json files change   
  push:
    branches: [ main ]
    paths:
    - '**.en.json' # only take action when *.en.json files change   
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  translate:
    runs-on: ubuntu-latest
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Get list of files that have been changed in the push
      - id: files
        uses: masesgroup/retrieve-changed-files@v2

      # Process the changed files
      - name: Work with the list of modified files
        id: translate
        env:
          AZURE_TRANSLATOR_SUBSCRIPTION_KEY: ${{ secrets.AZURE_TRANSLATOR_SUBSCRIPTION_KEY }}
          AZURE_TRANSLATOR_ENDPOINT: ${{ secrets.AZURE_TRANSLATOR_ENDPOINT }}
          AZURE_TRANSLATOR_REGION: ${{ secrets.AZURE_TRANSLATOR_REGION }}
        run: |
          for input_file in ${{ steps.files.outputs.all }}; do 
            input_file_extension=${input_file: -7}
            # Only process English checklists (.en.json)
            if [[ "$input_file_extension" == "en.json" ]]; then
              echo "Processing ${input_file}..."
              echo "done_something=yes" >> $GITHUB_OUTPUT
              # Sort modified file
              python3 ./scripts/sort_checklist.py --input-file $input_file
              # Update the timestamp in the modified file
              python3 ./scripts/timestamp_checklist.py --input-file $input_file
              # Translate modified file
              python3 ./scripts/translate.py --input-file $input_file
            fi
          done

      # Generate macro-free spreadsheets and Azure Monitor workbooks
      - name: setup python
        if: ${{ steps.translate.outputs.done_something }} == 'yes'
        uses: actions/setup-python@v2
        with:
          python-version: 3.8 #install the python needed
      - name: Install dependencies
        if: ${{ steps.translate.outputs.done_something }} == 'yes'
        run: |
          python -m pip install --upgrade pip
          pip install requests openpyxl
      # Create Excel spreadsheets
      - name: execute excel python script # run file
        if: ${{ steps.translate.outputs.done_something }} == 'yes'
        run: |
          python3 ./scripts/update_excel_openpyxl.py --checklist-file="${{ steps.files.outputs.all }}" --find-all --excel-file="./spreadsheet/macrofree/review_checklist_empty.xlsx" --output-name-is-input-name --output-path="./spreadsheet/macrofree/" --verbose

      # Create Azure Monitor workbooks
      - name: execute workbook python script # run file
        if: ${{ steps.translate.outputs.done_something }} == 'yes'
        run: |
          # Create workbooks for the modified file
          python3 ./scripts/workbook_create.py --checklist-file="${{ steps.files.outputs.all }}" --output-path="./workbooks/" --blocks-path="./workbooks/blocks/"
          python3 ./scripts/workbook_create.py --checklist-file="${{ steps.files.outputs.all }}" --output-path="./workbooks/" --blocks-path="./workbooks/blocks/" --counters
          # Extra static commands to generate a network-specific LZ workbook
          python3 ./scripts/workbook_create.py --checklist-file ./checklists/lz_checklist.en.json --output-path ./workbooks --blocks-path ./workbooks/blocks --create-arm-template --category=network
          python3 ./scripts/workbook_create.py --checklist-file ./checklists/lz_checklist.en.json --output-path ./workbooks --blocks-path ./workbooks/blocks --create-arm-template --category=network --counters

      # Create the PR if any change was made
      - name: Create pull request
        uses: peter-evans/create-pull-request@v3.10.1
        # if: ${{ steps.translator.outputs.has-new-translations }} == 'true'
        if: ${{ steps.translate.outputs.done_something }} == 'yes'
        with:
          # title: '${{ steps.translator.outputs.summary-title }}'
          # body: '${{ steps.translator.outputs.summary-details }}'
          title: 'Automatic translation of ${{ steps.files.outputs.all }}'
          body: 'Processed changed files ${{ steps.files.outputs.all }}'
          token: ${{ secrets.WORKFLOW_PAT }}
